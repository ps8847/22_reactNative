Step 1: Initialize your project
Open your terminal and create a new directory for your project. Navigate to the directory and run:

bash
Copy code
npm init -y
Step 2: Install dependencies
Install the necessary packages:

bash
Copy code
npm install express mongoose bcrypt jsonwebtoken body-parser
express: For creating the web server.
mongoose: MongoDB object modeling for Node.js.
bcrypt: For hashing passwords securely.
jsonwebtoken: For generating and verifying JSON Web Tokens.
body-parser: For parsing incoming request bodies.
Step 3: Set up Express
Create an index.js file in your project directory and set up your Express server:

javascript
Copy code
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const app = express();

app.use(bodyParser.json());

// Connect to MongoDB
mongoose.connect('mongodb://localhost:27017/mydatabase', { useNewUrlParser: true, useUnifiedTopology: true });
mongoose.connection.on('connected', () => {
  console.log('Connected to MongoDB');
});

// Define routes for signup and login (these are placeholders, you should customize them)
app.post('/signup', (req, res) => {
  // Implement signup logic here
});

app.post('/login', (req, res) => {
  // Implement login logic here
});

const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
Step 4: Create a User model
Create a models/User.js file for your User model:

javascript
Copy code
const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
  username: { type: String, unique: true, required: true },
  password: { type: String, required: true },
});

const User = mongoose.model('User', userSchema);

module.exports = User;
Step 5: Implement Signup and Login
Now, in your index.js, you need to implement the signup and login logic. For simplicity, we'll use plaintext passwords here, but in a production environment, you should hash and salt passwords.

javascript
Copy code
// ...

const User = require('./models/User');

app.post('/signup', async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = new User({ username, password });
    await user.save();
    res.status(201).json({ message: 'User created successfully' });
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

app.post('/login', async (req, res) => {
  try {
    const { username, password } = req.body;
    const user = await User.findOne({ username });

    if (!user) {
      return res.status(401).json({ error: 'Invalid username or password' });
    }

    if (user.password !== password) {
      return res.status(401).json({ error: 'Invalid username or password' });
    }

    // In a real-world scenario, you would use bcrypt to compare hashed passwords
    // and generate a JWT for authentication.

    res.json({ message: 'Login successful' });
  } catch (error) {
    res.status(500).json({ error: 'Internal server error' });
  }
});

// ...
Step 6: Start your server
Run your server:

bash
Copy code
node index.js
Your API is now running at http://localhost:3000. You can use tools like Postman or curl to test your signup and login routes.